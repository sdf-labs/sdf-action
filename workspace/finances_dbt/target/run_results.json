{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.3", "generated_at": "2024-08-09T14:27:28.570474Z", "invocation_id": "8f449f25-3ddb-4e99-9b9f-d4041239fe39", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.731403Z", "completed_at": "2024-08-09T14:27:25.757154Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.760217Z", "completed_at": "2024-08-09T14:27:25.760234Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03587818145751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_access_history", "compiled": true, "compiled_code": "\n\nselect\n    query_id,\n    query_start_time,\n    user_name,\n    direct_objects_accessed,\n    base_objects_accessed,\n    objects_modified\nfrom snowflake.account_usage.access_history\n\n\n    where query_start_time > (select coalesce(max(query_start_time), date '1970-01-01') from apress.public.stg_access_history)\n\n\norder by query_start_time asc", "relation_name": "apress.public.stg_access_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.741468Z", "completed_at": "2024-08-09T14:27:25.758900Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.761031Z", "completed_at": "2024-08-09T14:27:25.761035Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03502202033996582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_database_storage_usage_history", "compiled": true, "compiled_code": "\n\nselect\n    usage_date as date,\n    database_name,\n    average_database_bytes,\n    average_failsafe_bytes\nfrom snowflake.account_usage.database_storage_usage_history", "relation_name": "apress.public.stg_database_storage_usage_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.746035Z", "completed_at": "2024-08-09T14:27:25.759208Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.761463Z", "completed_at": "2024-08-09T14:27:25.761467Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03430509567260742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_metering_history", "compiled": true, "compiled_code": "\n\nselect\n    service_type,\n    start_time,\n    end_time,\n    entity_id,\n    name,\n    credits_used_compute,\n    credits_used_cloud_services,\n    credits_used\nfrom snowflake.account_usage.metering_history\norder by start_time asc", "relation_name": "apress.public.stg_metering_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.744374Z", "completed_at": "2024-08-09T14:27:25.759388Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.761826Z", "completed_at": "2024-08-09T14:27:25.761829Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03504610061645508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_metering_daily_history", "compiled": true, "compiled_code": "\n\nselect\n    usage_date as date,\n    service_type,\n    credits_used_cloud_services,\n    credits_adjustment_cloud_services\nfrom snowflake.account_usage.metering_daily_history", "relation_name": "apress.public.stg_metering_daily_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.747716Z", "completed_at": "2024-08-09T14:27:25.759593Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.762319Z", "completed_at": "2024-08-09T14:27:25.762321Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.03471994400024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_query_history", "compiled": true, "compiled_code": "\n\nselect\n    query_id,\n    query_text,\n    database_id,\n    database_name,\n    schema_id,\n    schema_name,\n    query_type,\n    session_id,\n    user_name,\n    role_name,\n    warehouse_id,\n    warehouse_name,\n    warehouse_size,\n    warehouse_type,\n    cluster_number,\n    query_tag,\n    execution_status,\n    error_code,\n    error_message,\n    start_time,\n    end_time,\n    total_elapsed_time,\n    bytes_scanned,\n    percentage_scanned_from_cache,\n    bytes_written,\n    bytes_written_to_result,\n    bytes_read_from_result,\n    rows_produced,\n    rows_inserted,\n    rows_updated,\n    rows_deleted,\n    rows_unloaded,\n    bytes_deleted,\n    partitions_scanned,\n    partitions_total,\n    bytes_spilled_to_local_storage,\n    bytes_spilled_to_remote_storage,\n    bytes_sent_over_the_network,\n    compilation_time,\n    execution_time,\n    queued_provisioning_time,\n    queued_repair_time,\n    queued_overload_time,\n    transaction_blocked_time,\n    outbound_data_transfer_cloud,\n    outbound_data_transfer_region,\n    outbound_data_transfer_bytes,\n    inbound_data_transfer_cloud,\n    inbound_data_transfer_region,\n    inbound_data_transfer_bytes,\n    list_external_files_time,\n    credits_used_cloud_services,\n    release_version,\n    external_function_total_invocations,\n    external_function_total_sent_rows,\n    external_function_total_received_rows,\n    external_function_total_sent_bytes,\n    external_function_total_received_bytes,\n    query_load_percent,\n    is_client_generated_statement,\n    query_acceleration_bytes_scanned,\n    query_acceleration_partitions_scanned,\n    query_acceleration_upper_limit_scale_factor,\n    query_hash,\n    query_hash_version,\n    query_parameterized_hash,\n    query_parameterized_hash_version\nfrom snowflake.account_usage.query_history\n\n\n    -- must use end time in case query hasn't completed\n    where end_time > (select max(end_time) from apress.public.stg_query_history)\n\n\norder by start_time", "relation_name": "apress.public.stg_query_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.750273Z", "completed_at": "2024-08-09T14:27:25.759850Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.762637Z", "completed_at": "2024-08-09T14:27:25.762639Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.03458571434020996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_rate_sheet_daily", "compiled": true, "compiled_code": "-- <1000 rows, will be more expensive to materialize incrementally with multiple SQL statements\n\n\nselect\n    date,\n    organization_name,\n    contract_number,\n    account_name,\n    account_locator,\n    region,\n    service_level,\n    usage_type,\n    currency,\n    effective_rate,\n    case\n        -- For most Snowflake accounts, the service_type field is always COMPUTE or STORAGE\n        -- Have recently seen new values introduced for one account: WAREHOUSE_METERING and CLOUD_SERVICES\n        -- For now, we'll force these to either be COMPUTE or STORAGE since that's what the downstream models expect\n        -- May adjust this in the future if Snowflake is permanently changing these fields for all accounts and starts offering different credit rates per usage_type\n        when service_type = 'STORAGE' then 'STORAGE'\n        else 'COMPUTE'\n    end as service_type\nfrom snowflake.organization_usage.rate_sheet_daily\norder by date", "relation_name": "apress.public.stg_rate_sheet_daily"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.752074Z", "completed_at": "2024-08-09T14:27:25.760018Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.762960Z", "completed_at": "2024-08-09T14:27:25.762962Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.03425908088684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_remaining_balance_daily", "compiled": true, "compiled_code": "-- <1000 rows, will be more expensive to materialize incrementally with multiple SQL statements\n\n\nselect\n    date,\n    organization_name,\n    contract_number,\n    currency,\n    free_usage_balance,\n    capacity_balance,\n    on_demand_consumption_balance,\n    rollover_balance\nfrom snowflake.organization_usage.remaining_balance_daily\norder by date", "relation_name": "apress.public.stg_remaining_balance_daily"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.753681Z", "completed_at": "2024-08-09T14:27:25.760691Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.763562Z", "completed_at": "2024-08-09T14:27:25.763565Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.03450298309326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_serverless_task_history", "compiled": true, "compiled_code": "\n\nselect\n    start_time,\n    end_time,\n    task_id,\n    task_name,\n    database_name,\n    credits_used\nfrom snowflake.account_usage.serverless_task_history\n\n\n    where end_time > (select max(end_time) from apress.public.stg_serverless_task_history)\n\n\norder by start_time", "relation_name": "apress.public.stg_serverless_task_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.755625Z", "completed_at": "2024-08-09T14:27:25.760843Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.763882Z", "completed_at": "2024-08-09T14:27:25.763884Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.03445005416870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history", "compiled": true, "compiled_code": "\n\nselect\n    usage_date as date,\n    average_stage_bytes\nfrom snowflake.account_usage.stage_storage_usage_history", "relation_name": "apress.public.stg_stage_storage_usage_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.757366Z", "completed_at": "2024-08-09T14:27:25.762132Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.764890Z", "completed_at": "2024-08-09T14:27:25.764892Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.03488278388977051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily", "compiled": true, "compiled_code": "select\n    organization_name,\n    contract_number,\n    account_name,\n    account_locator,\n    region,\n    service_level,\n    usage_date,\n    usage_type,\n    currency,\n    usage,\n    usage_in_currency,\n    balance_source\nfrom snowflake.organization_usage.usage_in_currency_daily", "relation_name": "apress.public.stg_usage_in_currency_daily"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.776582Z", "completed_at": "2024-08-09T14:27:25.777371Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.784619Z", "completed_at": "2024-08-09T14:27:25.784623Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017714738845825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowflake_finances.raw_customers", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.777691Z", "completed_at": "2024-08-09T14:27:25.778420Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.787044Z", "completed_at": "2024-08-09T14:27:25.787047Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.019713163375854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowflake_finances.raw_orderitems", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.778576Z", "completed_at": "2024-08-09T14:27:25.779332Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.787367Z", "completed_at": "2024-08-09T14:27:25.787369Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.019767045974731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowflake_finances.raw_orders", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.779486Z", "completed_at": "2024-08-09T14:27:25.780247Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.787719Z", "completed_at": "2024-08-09T14:27:25.787721Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.019829988479614258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowflake_finances.raw_products", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.769906Z", "completed_at": "2024-08-09T14:27:25.784964Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.788782Z", "completed_at": "2024-08-09T14:27:25.788785Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02302074432373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_warehouse_events_history", "compiled": true, "compiled_code": "\n\nselect\n    timestamp,\n    warehouse_id,\n    warehouse_name,\n    cluster_number,\n    event_name,\n    event_reason,\n    event_state,\n    user_name,\n    role_name,\n    query_id\nfrom snowflake.account_usage.warehouse_events_history\n\n\n    where timestamp > (select max(timestamp) from apress.public.stg_warehouse_events_history)\n\n\norder by timestamp asc", "relation_name": "apress.public.stg_warehouse_events_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.775248Z", "completed_at": "2024-08-09T14:27:25.786750Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.789127Z", "completed_at": "2024-08-09T14:27:25.789130Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02244257926940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.warehouse_credits_map", "compiled": true, "compiled_code": "\n\nwith\nwarehouse_credits_map as (\n    select * from (\n        values\n        ('X-Small', 'STANDARD', 1),\n        ('Small', 'STANDARD', 2),\n        ('Medium', 'STANDARD', 4),\n        ('Large', 'STANDARD', 8),\n        ('X-Large', 'STANDARD', 16),\n        ('2X-Large', 'STANDARD', 32),\n        ('3X-Large', 'STANDARD', 64),\n        ('4X-Large', 'STANDARD', 128),\n        ('5X-Large', 'STANDARD', 256),\n        ('6X-Large', 'STANDARD', 512),\n        ('Medium', 'SNOWPARK-OPTIMIZED', 6),\n        ('Large', 'SNOWPARK-OPTIMIZED', 12),\n        ('X-Large', 'SNOWPARK-OPTIMIZED', 24),\n        ('2X-Large', 'SNOWPARK-OPTIMIZED', 48),\n        ('3X-Large', 'SNOWPARK-OPTIMIZED', 96),\n        ('4X-Large', 'SNOWPARK-OPTIMIZED', 192),\n        ('5X-Large', 'SNOWPARK-OPTIMIZED', 384),\n        ('6X-Large', 'SNOWPARK-OPTIMIZED', 768)\n    ) as t (warehouse_size, warehouse_type, credits_per_hour)\n)\n\nselect\n    warehouse_size,\n    warehouse_type,\n    credits_per_hour,\n    credits_per_hour / 60 as credits_per_minute,\n    credits_per_hour / 3600 as credits_per_second\nfrom warehouse_credits_map", "relation_name": "apress.public.warehouse_credits_map"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.773168Z", "completed_at": "2024-08-09T14:27:25.786887Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.789461Z", "completed_at": "2024-08-09T14:27:25.789463Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023041963577270508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.stg_warehouse_metering_history", "compiled": true, "compiled_code": "\n\nselect\n    start_time,\n    end_time,\n    warehouse_id,\n    warehouse_name,\n    credits_used,\n    credits_used_compute,\n    credits_used_cloud_services\nfrom snowflake.account_usage.warehouse_metering_history\n\n\n    -- account for changing metering data\n    where end_time > (select coalesce(dateadd(day, -7, max(end_time)), '1970-01-01') from apress.public.stg_warehouse_metering_history)\n\n\norder by start_time", "relation_name": "apress.public.stg_warehouse_metering_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.780443Z", "completed_at": "2024-08-09T14:27:25.788463Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.790876Z", "completed_at": "2024-08-09T14:27:25.790879Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.022621870040893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.query_base_object_access", "compiled": true, "compiled_code": "\n\nwith\naccess_history as (\n    select *\n    from apress.public.stg_access_history\n\n    \n        where query_start_time > (select coalesce(dateadd('day', -1, max(query_start_time)), '1970-01-01') from apress.public.query_base_object_access)\n    \n\n),\n\naccess_history_flattened as (\n    select\n        access_history.query_id,\n        access_history.query_start_time,\n        access_history.user_name,\n        objects_accessed.value:objectId::integer as table_id, -- will be null for secured views or tables from a data share\n        objects_accessed.value:objectName::text as object_name,\n        objects_accessed.value:objectDomain::text as object_domain,\n        objects_accessed.value:columns as columns_array\n\n    from access_history, lateral flatten(access_history.base_objects_accessed) as objects_accessed\n),\n\naccess_history_flattened_w_columns as (\n    select\n        access_history_flattened.query_id,\n        access_history_flattened.query_start_time,\n        access_history_flattened.user_name,\n        access_history_flattened.table_id,\n        access_history_flattened.object_name,\n        access_history_flattened.object_domain,\n        array_agg(distinct columns.value:columnName::text) as columns_accessed\n    from access_history_flattened, lateral flatten(access_history_flattened.columns_array) as columns\n    where\n        access_history_flattened.object_name is not null\n    group by 1, 2, 3, 4, 5, 6\n)\n\nselect\n    md5(concat(query_id, object_name)) as _unique_id,\n    *\nfrom access_history_flattened_w_columns\norder by query_start_time asc", "relation_name": "apress.public.query_base_object_access"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.782561Z", "completed_at": "2024-08-09T14:27:25.788617Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.791167Z", "completed_at": "2024-08-09T14:27:25.791169Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.02267003059387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.query_direct_object_access", "compiled": true, "compiled_code": "\n\nwith\naccess_history as (\n    select *\n    from apress.public.stg_access_history\n\n    \n        where query_start_time > (select coalesce(dateadd('day', -1, max(query_start_time)), '1970-01-01') from apress.public.query_direct_object_access)\n    \n\n),\n\naccess_history_flattened as (\n    select\n        access_history.query_id,\n        access_history.query_start_time,\n        access_history.user_name,\n        objects_accessed.value:objectId::integer as table_id, -- will be null for secured views or tables from a data share\n        objects_accessed.value:objectName::text as object_name,\n        objects_accessed.value:objectDomain::text as object_domain,\n        objects_accessed.value:columns as columns_array\n\n    from access_history, lateral flatten(access_history.direct_objects_accessed) as objects_accessed\n),\n\naccess_history_flattened_w_columns as (\n    select\n        access_history_flattened.query_id,\n        access_history_flattened.query_start_time,\n        access_history_flattened.user_name,\n        access_history_flattened.table_id,\n        access_history_flattened.object_name,\n        access_history_flattened.object_domain,\n        array_agg(distinct columns.value:columnName::text) as columns_accessed\n    from access_history_flattened, lateral flatten(access_history_flattened.columns_array) as columns\n    where\n        access_history_flattened.object_name is not null\n    group by 1, 2, 3, 4, 5, 6\n)\n\nselect\n    md5(concat(query_id, object_name)) as _unique_id,\n    *\nfrom access_history_flattened_w_columns\norder by query_start_time asc", "relation_name": "apress.public.query_direct_object_access"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.785207Z", "completed_at": "2024-08-09T14:27:25.789995Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.792267Z", "completed_at": "2024-08-09T14:27:25.792269Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.02309393882751465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.warehouses_type2_dimension", "compiled": true, "compiled_code": "\n\nwith\nstop_threshold as (\n    select max(start_time) as timestamp\n    from apress.public.stg_query_history\n),\n\nwarehouse_snapshots_base as (\n    select\n        warehouse_id,\n        warehouse_size,\n        warehouse_name,\n        start_time as timestamp,\n        lag(warehouse_size) over (partition by warehouse_id order by start_time) as prev_warehouse_size,\n        lag(warehouse_name) over (partition by warehouse_id order by start_time) as prev_warehouse_name\n    from apress.public.stg_query_history\n    where\n        warehouse_size is not null\n),\n\nwarehouse_snapshots as (\n    select\n        warehouse_id,\n        warehouse_name,\n        warehouse_size,\n        timestamp as valid_from,\n        lead(timestamp) over (partition by warehouse_id order by timestamp) as _valid_to\n    from warehouse_snapshots_base\n    where\n        warehouse_size != coalesce(prev_warehouse_size, '')\n        or warehouse_name != coalesce(prev_warehouse_name, '')\n)\n\nselect\n    warehouse_snapshots.warehouse_id,\n    warehouse_snapshots.warehouse_name,\n    warehouse_snapshots.warehouse_size,\n    warehouse_snapshots.valid_from,\n    coalesce(warehouse_snapshots._valid_to, stop_threshold.timestamp) as valid_to,\n    warehouse_snapshots._valid_to is null as is_current\nfrom warehouse_snapshots\ncross join stop_threshold", "relation_name": "apress.public.warehouses_type2_dimension"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.800715Z", "completed_at": "2024-08-09T14:27:25.802130Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.813484Z", "completed_at": "2024-08-09T14:27:25.813488Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.021030187606811523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.snowflake_finances.customers_snapshot_check_strategy__all", "compiled": true, "compiled_code": "\n\n\n\nselect\n  *\nfrom apress.public.raw_customers\n", "relation_name": "apress.snapshots.customers_snapshot_check_strategy__all"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.808443Z", "completed_at": "2024-08-09T14:27:25.809873Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.818271Z", "completed_at": "2024-08-09T14:27:25.818274Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023687124252319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.snowflake_finances.customers_snapshot_check_strategy__list", "compiled": true, "compiled_code": "\n\n\n\nselect\n  *\nfrom apress.public.raw_customers\n", "relation_name": "apress.snapshots.customers_snapshot_check_strategy__list"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.810111Z", "completed_at": "2024-08-09T14:27:25.811514Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.818619Z", "completed_at": "2024-08-09T14:27:25.818621Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023767948150634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.snowflake_finances.customers_snapshot_timestamp_strategy", "compiled": true, "compiled_code": "\n\n\n\nselect\n  *,\n  md5(email) as email\nfrom apress.public.raw_customers\n", "relation_name": "apress.snapshots.customers_snapshot_timestamp_strategy"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.795972Z", "completed_at": "2024-08-09T14:27:25.811748Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.818927Z", "completed_at": "2024-08-09T14:27:25.818929Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028378725051879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view", "compiled": true, "compiled_code": "select\n    date,\n    organization_name,\n    currency,\n    free_usage_balance,\n    capacity_balance,\n    on_demand_consumption_balance,\n    rollover_balance\nfrom apress.public.stg_remaining_balance_daily\n\nqualify row_number() over (partition by date order by contract_number desc nulls last) = 1", "relation_name": "apress.public.remaining_balance_daily_without_contract_view"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.798439Z", "completed_at": "2024-08-09T14:27:25.815689Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.821519Z", "completed_at": "2024-08-09T14:27:25.821522Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.029584169387817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finances.stg_crm_customers", "compiled": true, "compiled_code": "select\n  cus.CustomerId as \"CustomerId\",\n  initcap(cus.name) as FullName,\n  initcap(split_part(cus.name, ' ', 1)) as FirstName,\n  initcap(split_part(cus.name, ' ', 2)) as LastName,\n  -- cus.Phone as PhoneNumber,\n  '(' || substr(cus.Phone, 3, 3) || ')' || ' ' || substr(cus.Phone, 7, 9)\nas PhoneNumber,\n  cus.Email as EmailAddress,\n  cus.Address,\n  cus.Region,\n  cus.PostalZip,\n  cus.Country\nfrom apress.public.raw_customers as cus", "relation_name": "apress.public_staging.stg_crm_customers"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.811927Z", "completed_at": "2024-08-09T14:27:25.821312Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.824203Z", "completed_at": "2024-08-09T14:27:25.824206Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02914881706237793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finances.stg_furniture_mart_orderitems", "compiled": true, "compiled_code": "select\n  itm.OrderItemsId,\n  itm.OrderId,\n  itm.ProductId\nfrom apress.public.raw_orderitems as itm", "relation_name": "apress.public_staging.stg_furniture_mart_orderitems"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.814143Z", "completed_at": "2024-08-09T14:27:25.822224Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.825730Z", "completed_at": "2024-08-09T14:27:25.825733Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.028538227081298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finances.stg_furniture_mart_orders", "compiled": true, "compiled_code": "\n\nselect\n  ord.OrderId,\n  ord.CustomerId,\n  initcap(ord.SalesPerson) as SalesPerson,\n  cast(ord.OrderPlacedTimestamp as timestamp_ntz) as OrderPlacedTimestamp,\n  ord.OrderStatus,\n  cast(ord.UpdatedAt as timestamp_ntz) as UpdatedAt\nfrom apress.public.raw_orders as ord", "relation_name": "apress.public_staging.stg_furniture_mart_orders"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.815948Z", "completed_at": "2024-08-09T14:27:25.822576Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.826209Z", "completed_at": "2024-08-09T14:27:25.826211Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.028594970703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finances.stg_furniture_mart_products", "compiled": true, "compiled_code": "select\n  pro.*\nfrom apress.public.raw_products as pro", "relation_name": "apress.public_staging.stg_furniture_mart_products"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.819259Z", "completed_at": "2024-08-09T14:27:25.823772Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.827138Z", "completed_at": "2024-08-09T14:27:25.827141Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.026825904846191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.warehouse_cluster_status", "compiled": true, "compiled_code": "\n\nwith\nstop_threshold as (\n    select max(timestamp) as timestamp\n    from apress.public.stg_warehouse_events_history\n),\n\nwarehouse_cluster_status_base as (\n    select\n        warehouse_id,\n        warehouse_name,\n        cluster_number,\n        timestamp as valid_from,\n        lead(timestamp) over (partition by warehouse_id, cluster_number order by timestamp asc) as valid_to,\n        event_name = 'RESUME_CLUSTER' as is_active\n    from apress.public.stg_warehouse_events_history\n    where\n        event_name in ('RESUME_CLUSTER', 'SUSPEND_CLUSTER')\n        and event_state = 'COMPLETED'\n),\n\nwarehouse_cluster_status as (\n    select\n        warehouse_cluster_status_base.warehouse_id,\n        warehouse_cluster_status_base.warehouse_name,\n        warehouse_cluster_status_base.cluster_number,\n        warehouse_cluster_status_base.is_active,\n        warehouse_cluster_status_base.valid_from,\n        coalesce(warehouse_cluster_status_base.valid_to, stop_threshold.timestamp) as valid_to\n    from warehouse_cluster_status_base\n    cross join stop_threshold\n)\n\nselect *\nfrom warehouse_cluster_status\norder by valid_from", "relation_name": "apress.public.warehouse_cluster_status"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.829109Z", "completed_at": "2024-08-09T14:27:25.848082Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.851306Z", "completed_at": "2024-08-09T14:27:25.851310Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.028383970260620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.query_base_table_access", "compiled": true, "compiled_code": "select\n    _unique_id,\n    query_id,\n    query_start_time,\n    user_name,\n    object_name as full_table_name,\n    table_id,\n    columns_accessed\nfrom apress.public.query_base_object_access\nwhere\n    object_domain = 'Table' -- removes secured views\n    and table_id is not null -- removes tables from a data share", "relation_name": "apress.public.query_base_table_access"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.831658Z", "completed_at": "2024-08-09T14:27:25.848961Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.856906Z", "completed_at": "2024-08-09T14:27:25.856908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03171515464782715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.query_direct_table_access", "compiled": true, "compiled_code": "select\n    _unique_id,\n    query_id,\n    query_start_time,\n    user_name,\n    object_name as full_table_name,\n    table_id,\n    columns_accessed\nfrom apress.public.query_direct_object_access\nwhere\n    object_domain = 'Table' -- removes secured views\n    and table_id is not null -- removes tables from a data share", "relation_name": "apress.public.query_direct_table_access"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.842825Z", "completed_at": "2024-08-09T14:27:25.856369Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.859599Z", "completed_at": "2024-08-09T14:27:25.859602Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.031768083572387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_stg_crm_customers_Country.4e9025507d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Country\nfrom apress.public_staging.stg_crm_customers\nwhere Country is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.841403Z", "completed_at": "2024-08-09T14:27:25.856558Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.860350Z", "completed_at": "2024-08-09T14:27:25.860353Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03271603584289551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finances.dim_customers", "compiled": true, "compiled_code": "select\n  \"CustomerId\",\n  FullName\nfrom apress.public_staging.stg_crm_customers as cus", "relation_name": "apress.public.dim_customers"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.849280Z", "completed_at": "2024-08-09T14:27:25.859379Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.862517Z", "completed_at": "2024-08-09T14:27:25.862520Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.031594038009643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_stg_crm_customers_EmailAddress.c99721ed75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect EmailAddress\nfrom apress.public_staging.stg_crm_customers\nwhere EmailAddress is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.851657Z", "completed_at": "2024-08-09T14:27:25.860040Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.863342Z", "completed_at": "2024-08-09T14:27:25.863345Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.030288219451904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_stg_crm_customers_FirstName.ad5de3ce6b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect FirstName\nfrom apress.public_staging.stg_crm_customers\nwhere FirstName is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.854380Z", "completed_at": "2024-08-09T14:27:25.860190Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.863683Z", "completed_at": "2024-08-09T14:27:25.863685Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.030344009399414062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_stg_crm_customers_FullName.a3d8fb2bd9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect FullName\nfrom apress.public_staging.stg_crm_customers\nwhere FullName is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.857230Z", "completed_at": "2024-08-09T14:27:25.862856Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.864950Z", "completed_at": "2024-08-09T14:27:25.864952Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.024122238159179688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_stg_crm_customers__CustomerId_.01c593af90", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"CustomerId\"\nfrom apress.public_staging.stg_crm_customers\nwhere \"CustomerId\" is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.866442Z", "completed_at": "2024-08-09T14:27:25.874533Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.881504Z", "completed_at": "2024-08-09T14:27:25.881508Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.019668102264404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.unique_stg_crm_customers__CustomerId_.ef85cf717d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    \"CustomerId\" as unique_field,\n    count(*) as n_records\n\nfrom apress.public_staging.stg_crm_customers\nwhere \"CustomerId\" is not null\ngroup by \"CustomerId\"\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.870589Z", "completed_at": "2024-08-09T14:27:25.879189Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.886974Z", "completed_at": "2024-08-09T14:27:25.886978Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022801876068115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finances.fct_orders", "compiled": true, "compiled_code": "\n\n\nselect\n  ord.OrderId,\n  ord.CustomerId,\n  ord.SalesPerson,  \n  ord.OrderStatus,\n  ord.OrderPlacedTimestamp,\n  1 as Ordr\nfrom apress.public_staging.stg_furniture_mart_orders as ord\n\n-- left join apress.snapshots.customers_snapshot_timestamp_strategy as cus\n--   on ord.CustomerId = cus.CustomerId\n-- uncomment the join criteria below to implement a time range join. \n--   and ord.OrderPlacedTimestamp between cus.dbt_valid_from and ifnull(cus.dbt_valid_to, '2099-12-31'::timestamp_ntz)\n\n-- filters the snapshot table to only include the active records.\n-- where cus.dbt_valid_to is null", "relation_name": "apress.public_operations.fct_orders"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.872882Z", "completed_at": "2024-08-09T14:27:25.886717Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.888260Z", "completed_at": "2024-08-09T14:27:25.888264Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.02311992645263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finances.int_orders_items_products_joined", "compiled": true, "compiled_code": "select\n  itm.OrderItemsId,\n  itm.OrderId,\n  pro.Product,\n  pro.Department,\n  pro.Price\nfrom apress.public_staging.stg_furniture_mart_orderitems as itm\njoin apress.public_staging.stg_furniture_mart_products as pro\n  on itm.ProductId = pro.ProductId", "relation_name": "apress.public_staging.int_orders_items_products_joined"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.874860Z", "completed_at": "2024-08-09T14:27:25.887357Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.889234Z", "completed_at": "2024-08-09T14:27:25.889237Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02338719367980957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_dim_customers_Country.3837e559fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Country\nfrom apress.public.dim_customers\nwhere Country is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.876891Z", "completed_at": "2024-08-09T14:27:25.887525Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.889540Z", "completed_at": "2024-08-09T14:27:25.889542Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02029109001159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_dim_customers_EmailAddress.bcc647a7f7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect EmailAddress\nfrom apress.public.dim_customers\nwhere EmailAddress is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.879397Z", "completed_at": "2024-08-09T14:27:25.888078Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.890106Z", "completed_at": "2024-08-09T14:27:25.890108Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.020216703414916992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_dim_customers_FirstName.5ed56cb226", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect FirstName\nfrom apress.public.dim_customers\nwhere FirstName is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.881879Z", "completed_at": "2024-08-09T14:27:25.888666Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.890644Z", "completed_at": "2024-08-09T14:27:25.890646Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.020607948303222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_dim_customers_FullName.b7f05a7d99", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect FullName\nfrom apress.public.dim_customers\nwhere FullName is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.884837Z", "completed_at": "2024-08-09T14:27:25.888874Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.891040Z", "completed_at": "2024-08-09T14:27:25.891041Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.018531084060668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_dim_customers__CustomerId_.0ba250bfe2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"CustomerId\"\nfrom apress.public.dim_customers\nwhere \"CustomerId\" is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.893675Z", "completed_at": "2024-08-09T14:27:25.902275Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.909520Z", "completed_at": "2024-08-09T14:27:25.909526Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.0198519229888916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.unique_dim_customers__CustomerId_.b27f5c33b7", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    \"CustomerId\" as unique_field,\n    count(*) as n_records\n\nfrom apress.public.dim_customers\nwhere \"CustomerId\" is not null\ngroup by \"CustomerId\"\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.897334Z", "completed_at": "2024-08-09T14:27:25.906976Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.915817Z", "completed_at": "2024-08-09T14:27:25.915821Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02458500862121582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finances.fct_daily_orders", "compiled": true, "compiled_code": "\n\n/********************************************/\n\n\n/********************************************/\n\n-- Listing 6.8\nselect\n  cast(OrderPlacedTimestamp as bigint) OrderPlacedDate,\n  \n  count(case when OrderStatus = 'placed' then OrderId end) as NumberOfOrdersplaced,\n  \n  count(case when OrderStatus = 'shipped' then OrderId end) as NumberOfOrdersshipped,\n  \n  count(case when OrderStatus = 'returned' then OrderId end) as NumberOfOrdersreturned\n  \nfrom apress.public_operations.fct_orders\ngroup by 1", "relation_name": "apress.public_operations.fct_daily_orders"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.900454Z", "completed_at": "2024-08-09T14:27:25.913271Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.916793Z", "completed_at": "2024-08-09T14:27:25.916796Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.024524927139282227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finances.fct_revenue_orders", "compiled": true, "compiled_code": "with get_orders_revenue as(\n  select\n    pro.OrderId,\n    sum(pro.Price) as Revenue\n  from apress.public_staging.int_orders_items_products_joined as pro\n  group by 1\n)\n\nselect\n  ord.OrderId,\n  ord.OrderPlacedTimestamp,\n  ord.UpdatedAt,\n  ord.OrderStatus,\n  ord.SalesPerson,\n  rev.Revenue\nfrom get_orders_revenue as rev\njoin apress.public_staging.stg_furniture_mart_orders as ord\n  on rev.OrderId = ord.OrderId", "relation_name": "apress.public_finance.fct_revenue_orders"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.902834Z", "completed_at": "2024-08-09T14:27:25.916352Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.917653Z", "completed_at": "2024-08-09T14:27:25.917656Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02457904815673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_int_orders_items_products_joined_OrderId.264a18560d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect OrderId\nfrom apress.public_staging.int_orders_items_products_joined\nwhere OrderId is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.904871Z", "completed_at": "2024-08-09T14:27:25.916514Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.917992Z", "completed_at": "2024-08-09T14:27:25.917994Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.024651050567626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_int_orders_items_products_joined_OrderItemsId.78417481ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect OrderItemsId\nfrom apress.public_staging.int_orders_items_products_joined\nwhere OrderItemsId is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.907222Z", "completed_at": "2024-08-09T14:27:25.917151Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.918774Z", "completed_at": "2024-08-09T14:27:25.918776Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.02276921272277832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_int_orders_items_products_joined_Price.d07fc63960", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Price\nfrom apress.public_staging.int_orders_items_products_joined\nwhere Price is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.910032Z", "completed_at": "2024-08-09T14:27:25.917445Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.919419Z", "completed_at": "2024-08-09T14:27:25.919421Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.022849082946777344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_int_orders_items_products_joined_Product.1c19df6415", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Product\nfrom apress.public_staging.int_orders_items_products_joined\nwhere Product is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.913533Z", "completed_at": "2024-08-09T14:27:25.918312Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.920217Z", "completed_at": "2024-08-09T14:27:25.920220Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.023292064666748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.unique_int_orders_items_products_joined_OrderItemsId.efe584e8fd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    OrderItemsId as unique_field,\n    count(*) as n_records\n\nfrom apress.public_staging.int_orders_items_products_joined\nwhere OrderItemsId is not null\ngroup by OrderItemsId\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.922864Z", "completed_at": "2024-08-09T14:27:25.932871Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.933530Z", "completed_at": "2024-08-09T14:27:25.933534Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.013083934783935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_fct_revenue_orders_OrderId.ba17e431cd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect OrderId\nfrom apress.public_finance.fct_revenue_orders\nwhere OrderId is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.924959Z", "completed_at": "2024-08-09T14:27:25.933051Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.934090Z", "completed_at": "2024-08-09T14:27:25.934092Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013158321380615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_fct_revenue_orders_OrderPlacedTimestamp.71eb395704", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect OrderPlacedTimestamp\nfrom apress.public_finance.fct_revenue_orders\nwhere OrderPlacedTimestamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.926994Z", "completed_at": "2024-08-09T14:27:25.933374Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.934572Z", "completed_at": "2024-08-09T14:27:25.934575Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.013401269912719727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_fct_revenue_orders_OrderStatus.c25074ed44", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect OrderStatus\nfrom apress.public_finance.fct_revenue_orders\nwhere OrderStatus is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.929103Z", "completed_at": "2024-08-09T14:27:25.933888Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.934966Z", "completed_at": "2024-08-09T14:27:25.934968Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013484954833984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.not_null_fct_revenue_orders_Revenue.2737a7bcd1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Revenue\nfrom apress.public_finance.fct_revenue_orders\nwhere Revenue is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.930857Z", "completed_at": "2024-08-09T14:27:25.934398Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:25.935396Z", "completed_at": "2024-08-09T14:27:25.935399Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0136871337890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finances.unique_fct_revenue_orders_OrderId.3d106b3e72", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    OrderId as unique_field,\n    count(*) as n_records\n\nfrom apress.public_finance.fct_revenue_orders\nwhere OrderId is not null\ngroup by OrderId\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.802361Z", "completed_at": "2024-08-09T14:27:26.373238Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:26.373801Z", "completed_at": "2024-08-09T14:27:26.373819Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.6894361972808838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.snowflake_finances.customers_snapshot_check_strategy__hash", "compiled": true, "compiled_code": "\n\n\n\nselect\n  *,\n  \n    \nmd5(cast(coalesce(cast(CUSTOMERID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(NAME as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(PHONE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(EMAIL as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ADDRESS as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(REGION as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(POSTALZIP as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(COUNTRY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(CREATEDAT as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(UPDATEDAT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as HashDiff\nfrom apress.public.raw_customers\n", "relation_name": "apress.snapshots.customers_snapshot_check_strategy__hash"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:25.833699Z", "completed_at": "2024-08-09T14:27:26.733263Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:26.733868Z", "completed_at": "2024-08-09T14:27:26.733884Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0130939483642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.daily_rates", "compiled": true, "compiled_code": "\n\n/*\nsnowflake.organization_usage.rate_sheet_daily isn't guaranteed to have 1 row per day per usage type.\n\nIf you don't consume any compute resources on a given day, there won't be a record.\n\nThis model guarantees 1 row per day per usage type, by filling in missing values with rates from the last\nknown day.\n*/\n\nwith\ndates_base as (\n    select date_day as date from (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2413\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        '2018-01-01'\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= dateadd(day, 1, current_date)\n\n)\n\nselect * from filtered\n\n\n    )\n),\n\nrate_sheet_daily_base as (\n    select\n        date,\n        usage_type,\n        currency,\n        effective_rate,\n        service_type\n    from apress.public.stg_rate_sheet_daily\n    where\n        account_locator = current_account()\n),\n\nstop_thresholds as (\n    select min(date) as start_date\n    from rate_sheet_daily_base\n\n    union all\n\n    select min(date) as start_date\n    from apress.public.remaining_balance_daily_without_contract_view\n),\n\ndate_range as (\n    select\n        max(start_date) as start_date,\n        current_date as end_date\n    from stop_thresholds\n),\n\nremaining_balance_daily as (\n    select\n        date,\n        free_usage_balance + capacity_balance + on_demand_consumption_balance + rollover_balance as remaining_balance,\n        remaining_balance < 0 as is_account_in_overage\n    from apress.public.remaining_balance_daily_without_contract_view\n),\n\nlatest_remaining_balance_daily as (\n    select\n        date,\n        remaining_balance,\n        is_account_in_overage\n    from remaining_balance_daily\n    qualify row_number() over (order by date desc) = 1\n),\n\nrate_sheet_daily as (\n    select rate_sheet_daily_base.*\n    from rate_sheet_daily_base\n    inner join date_range\n        on rate_sheet_daily_base.date between date_range.start_date and date_range.end_date\n),\n\nrates_date_range_w_usage_types as (\n    select\n        date_range.start_date,\n        date_range.end_date,\n        usage_types.usage_type\n    from date_range\n    cross join (select distinct usage_type from rate_sheet_daily) as usage_types\n),\n\nbase as (\n    select\n        db.date,\n        dr.usage_type\n    from dates_base as db\n    inner join rates_date_range_w_usage_types as dr\n        on db.date between dr.start_date and dr.end_date\n),\n\nrates_w_overage as (\n    select\n        base.date,\n        base.usage_type,\n        coalesce(\n            rate_sheet_daily.service_type,\n            lag(rate_sheet_daily.service_type) ignore nulls over (partition by base.usage_type order by base.date),\n            lead(rate_sheet_daily.service_type) ignore nulls over (partition by base.usage_type order by base.date)\n        ) as service_type,\n        coalesce(\n            rate_sheet_daily.effective_rate,\n            lag(rate_sheet_daily.effective_rate) ignore nulls over (partition by base.usage_type order by base.date),\n            lead(rate_sheet_daily.effective_rate) ignore nulls over (partition by base.usage_type order by base.date)\n        ) as effective_rate,\n        coalesce(\n            rate_sheet_daily.currency,\n            lag(rate_sheet_daily.currency) ignore nulls over (partition by base.usage_type order by base.date),\n            lead(rate_sheet_daily.currency) ignore nulls over (partition by base.usage_type order by base.date)\n        ) as currency,\n        base.usage_type like 'overage-%' as is_overage_rate,\n        replace(base.usage_type, 'overage-', '') as associated_usage_type,\n        coalesce(remaining_balance_daily.is_account_in_overage, latest_remaining_balance_daily.is_account_in_overage, false) as _is_account_in_overage,\n        case\n            when _is_account_in_overage and is_overage_rate then 1\n            when not _is_account_in_overage and not is_overage_rate then 1\n            else 0\n        end as rate_priority\n\n    from base\n    left join latest_remaining_balance_daily on latest_remaining_balance_daily.date is not null\n    left join remaining_balance_daily\n        on base.date = remaining_balance_daily.date\n    left join rate_sheet_daily\n        on base.date = rate_sheet_daily.date\n            and base.usage_type = rate_sheet_daily.usage_type\n),\n\nrates as (\n    select\n        date,\n        usage_type,\n        associated_usage_type,\n        service_type,\n        effective_rate,\n        currency,\n        is_overage_rate\n    from rates_w_overage\n    qualify row_number() over (partition by date, service_type, associated_usage_type order by rate_priority desc) = 1\n)\n\nselect\n    date,\n    associated_usage_type as usage_type,\n    service_type,\n    effective_rate,\n    currency,\n    is_overage_rate,\n    row_number() over (partition by service_type, associated_usage_type order by date desc) = 1 as is_latest_rate\nfrom rates\norder by date", "relation_name": "apress.public.daily_rates"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:26.842840Z", "completed_at": "2024-08-09T14:27:26.862114Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:26.862646Z", "completed_at": "2024-08-09T14:27:26.862651Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.021484851837158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.cost_per_query", "compiled": true, "compiled_code": "\n\nwith\nstop_threshold as (\n    select max(end_time) as latest_ts\n    from apress.public.stg_warehouse_metering_history\n),\n\nfiltered_queries as (\n    select\n        query_id,\n        query_text as original_query_text,\n        credits_used_cloud_services,\n        warehouse_id,\n        warehouse_size is not null as ran_on_warehouse,\n        timeadd(\n            'millisecond',\n            queued_overload_time + compilation_time\n            + queued_provisioning_time + queued_repair_time\n            + list_external_files_time,\n            start_time\n        ) as execution_start_time,\n        start_time,\n        end_time,\n        query_acceleration_bytes_scanned\n    from apress.public.stg_query_history\n    where true\n        and end_time <= (select latest_ts from stop_threshold)\n        \n        -- account for late arriving queries\n        and end_time > (select coalesce(dateadd(day, -3, max(end_time)), '1970-01-01') from apress.public.cost_per_query)\n        \n),\n\nhours_list as (\n    select\n        dateadd(\n            'hour',\n            '-' || row_number() over (order by seq4() asc),\n            dateadd('day', '+1', current_date::timestamp_tz)\n        ) as hour_start,\n        dateadd('hour', '+1', hour_start) as hour_end\n\n    \n    from table(generator(rowcount => (24 * 7)))\n    \n),\n\n-- 1 row per hour a query ran\nquery_hours as (\n    select\n        hours_list.hour_start,\n        hours_list.hour_end,\n        queries.*\n    from hours_list\n    inner join filtered_queries as queries\n        on hours_list.hour_start >= date_trunc('hour', queries.execution_start_time)\n            and hours_list.hour_start < queries.end_time\n            and queries.ran_on_warehouse\n),\n\nquery_seconds_per_hour as (\n    select\n        *,\n        datediff('millisecond', greatest(execution_start_time, hour_start), least(end_time, hour_end)) as num_milliseconds_query_ran,\n        sum(num_milliseconds_query_ran) over (partition by warehouse_id, hour_start) as total_query_milliseconds_in_hour,\n        div0(num_milliseconds_query_ran, total_query_milliseconds_in_hour) as fraction_of_total_query_time_in_hour,\n        sum(query_acceleration_bytes_scanned) over (partition by warehouse_id, hour_start) as total_query_acceleration_bytes_scanned_in_hour,\n        div0(query_acceleration_bytes_scanned, total_query_acceleration_bytes_scanned_in_hour) as fraction_of_total_query_acceleration_bytes_scanned_in_hour,\n        hour_start as hour\n    from query_hours\n),\n\ncredits_billed_hourly as (\n    select\n        start_time as hour,\n        entity_id as warehouse_id,\n        sum(iff(service_type = 'WAREHOUSE_METERING', credits_used_compute, 0)) as credits_used_compute,\n        sum(iff(service_type = 'WAREHOUSE_METERING', credits_used_cloud_services, 0)) as credits_used_cloud_services,\n        sum(iff(service_type = 'QUERY_ACCELERATION', credits_used_compute, 0)) as credits_used_query_acceleration\n    from apress.public.stg_metering_history\n    where true\n        and service_type in ('QUERY_ACCELERATION', 'WAREHOUSE_METERING')\n    group by 1, 2\n),\n\nquery_cost as (\n    select\n        query_seconds_per_hour.*,\n        credits_billed_hourly.credits_used_compute * query_seconds_per_hour.fraction_of_total_query_time_in_hour as allocated_compute_credits_in_hour,\n        allocated_compute_credits_in_hour * daily_rates.effective_rate as allocated_compute_cost_in_hour,\n        credits_billed_hourly.credits_used_query_acceleration * query_seconds_per_hour.fraction_of_total_query_acceleration_bytes_scanned_in_hour as allocated_query_acceleration_credits_in_hour,\n        allocated_query_acceleration_credits_in_hour * daily_rates.effective_rate as allocated_query_acceleration_cost_in_hour\n    from query_seconds_per_hour\n    inner join credits_billed_hourly\n        on query_seconds_per_hour.warehouse_id = credits_billed_hourly.warehouse_id\n            and query_seconds_per_hour.hour = credits_billed_hourly.hour\n    inner join apress.public.daily_rates as daily_rates\n        on date(query_seconds_per_hour.start_time) = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'compute'\n),\n\ncost_per_query as (\n    select\n        query_id,\n        any_value(start_time) as start_time,\n        any_value(end_time) as end_time,\n        any_value(execution_start_time) as execution_start_time,\n        sum(allocated_compute_cost_in_hour) as compute_cost,\n        sum(allocated_compute_credits_in_hour) as compute_credits,\n        sum(allocated_query_acceleration_cost_in_hour) as query_acceleration_cost,\n        sum(allocated_query_acceleration_credits_in_hour) as query_acceleration_credits,\n        any_value(credits_used_cloud_services) as credits_used_cloud_services,\n        any_value(ran_on_warehouse) as ran_on_warehouse\n    from query_cost\n    group by 1\n),\n\ncredits_billed_daily as (\n    select\n        date(hour) as date,\n        sum(credits_used_compute) as daily_credits_used_compute,\n        sum(credits_used_cloud_services) as daily_credits_used_cloud_services,\n        greatest(daily_credits_used_cloud_services - daily_credits_used_compute * 0.1, 0) as daily_billable_cloud_services\n    from credits_billed_hourly\n    group by 1\n),\n\nall_queries as (\n    select\n        query_id,\n        start_time,\n        end_time,\n        execution_start_time,\n        compute_cost,\n        compute_credits,\n        query_acceleration_cost,\n        query_acceleration_credits,\n        credits_used_cloud_services,\n        ran_on_warehouse\n    from cost_per_query\n\n    union all\n\n    select\n        query_id,\n        start_time,\n        end_time,\n        execution_start_time,\n        0 as compute_cost,\n        0 as compute_credits,\n        0 as query_acceleration_cost,\n        0 as query_acceleration_credits,\n        credits_used_cloud_services,\n        ran_on_warehouse\n    from filtered_queries\n    where\n        not ran_on_warehouse\n)\n\nselect\n    all_queries.query_id,\n    all_queries.start_time,\n    all_queries.end_time,\n    all_queries.execution_start_time,\n    all_queries.compute_cost,\n    all_queries.compute_credits,\n    all_queries.query_acceleration_cost,\n    all_queries.query_acceleration_credits,\n    -- For the most recent day, which is not yet complete, this calculation won't be perfect.\n    -- For example, at 12PM on the latest day, it's possible that cloud credits make up <10% of compute cost, so the queries\n    -- from that day are not allocated any cloud_services_cost. The next time the model runs, after we have the full day of data,\n    -- this may change if cloud credits make up >10% of compute cost.\n    (div0(all_queries.credits_used_cloud_services, credits_billed_daily.daily_credits_used_cloud_services) * credits_billed_daily.daily_billable_cloud_services) * coalesce(daily_rates.effective_rate, current_rates.effective_rate) as cloud_services_cost,\n    div0(all_queries.credits_used_cloud_services, credits_billed_daily.daily_credits_used_cloud_services) * credits_billed_daily.daily_billable_cloud_services as cloud_services_credits,\n    all_queries.compute_cost + all_queries.query_acceleration_cost + cloud_services_cost as query_cost,\n    all_queries.compute_credits + all_queries.query_acceleration_credits + cloud_services_credits as query_credits,\n    all_queries.ran_on_warehouse,\n    coalesce(daily_rates.currency, current_rates.currency) as currency\nfrom all_queries\ninner join credits_billed_daily\n    on date(all_queries.start_time) = credits_billed_daily.date\nleft join apress.public.daily_rates as daily_rates\n    on date(all_queries.start_time) = daily_rates.date\n        and daily_rates.service_type = 'COMPUTE'\n        and daily_rates.usage_type = 'cloud services'\ninner join apress.public.daily_rates as current_rates\n    on current_rates.is_latest_rate\n        and current_rates.service_type = 'COMPUTE'\n        and current_rates.usage_type = 'cloud services'\norder by all_queries.start_time asc", "relation_name": "apress.public.cost_per_query"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:26.866283Z", "completed_at": "2024-08-09T14:27:26.875648Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:26.876193Z", "completed_at": "2024-08-09T14:27:26.876196Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.011739015579223633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.query_history_enriched", "compiled": true, "compiled_code": "\n\nwith\nquery_history as (\n    select\n        *,\n\n        -- this removes comments enclosed by /* <comment text> */ and single line comments starting with -- and either ending with a new line or end of string\n        regexp_replace(query_text, $$(\\/\\*(.|\\n|\\r)*?\\*\\/)|(--.*$)|(--.*(\\n|\\r))|;$$, '') as query_text_no_comments,\n\n        try_parse_json(regexp_substr(query_text, '/\\\\*\\\\s({\"app\":\\\\s\"dbt\".*})\\\\s\\\\*/', 1, 1, 'ie')) as _dbt_json_comment_meta,\n        case\n            when try_parse_json(query_tag)['dbt_snowflake_query_tags_version'] is not null then try_parse_json(query_tag)\n        end as _dbt_json_query_tag_meta,\n        case\n            when _dbt_json_comment_meta is not null or _dbt_json_query_tag_meta is not null then\n                apress.public.merge_objects(coalesce(_dbt_json_comment_meta, { }), coalesce(_dbt_json_query_tag_meta, { }))\n        end as dbt_metadata\n\n    from apress.public.stg_query_history\n\n    \n        -- Conservatively re-process the last 3 days to account for late arriving rates data. Allow an override from project variable\n        -- which changes the cost per query\n        where end_time > (select dateadd(day, -3, max(end_time)) from apress.public.query_history_enriched)\n    \n),\n\ncost_per_query as (\n    select *\n    from apress.public.cost_per_query\n    \n        -- Conservatively re-process the last 3 days to account for late arriving rates data. Allow an override from project variable\n        -- which changes the cost per query\n        where end_time > (select dateadd(day, -3, max(end_time)) from apress.public.query_history_enriched)\n    \n)\n\nselect\n    cost_per_query.query_id,\n    cost_per_query.compute_cost,\n    cost_per_query.compute_credits,\n    cost_per_query.query_acceleration_cost,\n    cost_per_query.query_acceleration_credits,\n    cost_per_query.cloud_services_cost,\n    cost_per_query.cloud_services_credits,\n    cost_per_query.query_cost,\n    cost_per_query.query_credits,\n    cost_per_query.execution_start_time,\n\n    -- Grab all columns from query_history (except the query time columns which we rename below)\n    query_history.query_text,\n    query_history.database_id,\n    query_history.database_name,\n    query_history.schema_id,\n    query_history.schema_name,\n    query_history.query_type,\n    query_history.session_id,\n    query_history.user_name,\n    query_history.role_name,\n    query_history.warehouse_id,\n    query_history.warehouse_name,\n    query_history.warehouse_size,\n    query_history.warehouse_type,\n    query_history.cluster_number,\n    query_history.query_tag,\n    query_history.execution_status,\n    query_history.error_code,\n    query_history.error_message,\n    query_history.start_time,\n    query_history.end_time,\n    query_history.total_elapsed_time,\n    query_history.bytes_scanned,\n    query_history.percentage_scanned_from_cache,\n    query_history.bytes_written,\n    query_history.bytes_written_to_result,\n    query_history.bytes_read_from_result,\n    query_history.rows_produced,\n    query_history.rows_inserted,\n    query_history.rows_updated,\n    query_history.rows_deleted,\n    query_history.rows_unloaded,\n    query_history.bytes_deleted,\n    query_history.partitions_scanned,\n    query_history.partitions_total,\n    query_history.bytes_spilled_to_local_storage,\n    query_history.bytes_spilled_to_remote_storage,\n    query_history.bytes_sent_over_the_network,\n    query_history.outbound_data_transfer_cloud,\n    query_history.outbound_data_transfer_region,\n    query_history.outbound_data_transfer_bytes,\n    query_history.inbound_data_transfer_cloud,\n    query_history.inbound_data_transfer_region,\n    query_history.inbound_data_transfer_bytes,\n    query_history.credits_used_cloud_services,\n    query_history.release_version,\n    query_history.external_function_total_invocations,\n    query_history.external_function_total_sent_rows,\n    query_history.external_function_total_received_rows,\n    query_history.external_function_total_sent_bytes,\n    query_history.external_function_total_received_bytes,\n    query_history.query_load_percent,\n    query_history.is_client_generated_statement,\n    query_history.query_acceleration_bytes_scanned,\n    query_history.query_acceleration_partitions_scanned,\n    query_history.query_acceleration_upper_limit_scale_factor,\n    query_history.query_hash,\n    query_history.query_hash_version,\n    query_history.query_parameterized_hash,\n    query_history.query_parameterized_hash_version,\n\n    -- Rename some existing columns for clarity\n    query_history.total_elapsed_time as total_elapsed_time_ms,\n    query_history.compilation_time as compilation_time_ms,\n    query_history.queued_provisioning_time as queued_provisioning_time_ms,\n    query_history.queued_repair_time as queued_repair_time_ms,\n    query_history.queued_overload_time as queued_overload_time_ms,\n    query_history.transaction_blocked_time as transaction_blocked_time_ms,\n    query_history.list_external_files_time as list_external_files_time_ms,\n    query_history.execution_time as execution_time_ms,\n\n    -- New columns\n    query_history.warehouse_size is not null as ran_on_warehouse,\n    query_history.bytes_scanned / power(1024, 3) as data_scanned_gb,\n    data_scanned_gb * query_history.percentage_scanned_from_cache as data_scanned_from_cache_gb,\n    query_history.bytes_spilled_to_local_storage / power(1024, 3) as data_spilled_to_local_storage_gb,\n    query_history.bytes_spilled_to_remote_storage / power(1024, 3) as data_spilled_to_remote_storage_gb,\n    query_history.bytes_sent_over_the_network / power(1024, 3) as data_sent_over_the_network_gb,\n    query_history.query_text_no_comments,\n    query_history.dbt_metadata,\n\n    query_history.total_elapsed_time / 1000 as total_elapsed_time_s,\n    query_history.compilation_time / 1000 as compilation_time_s,\n    query_history.queued_provisioning_time / 1000 as queued_provisioning_time_s,\n    query_history.queued_repair_time / 1000 as queued_repair_time_s,\n    query_history.queued_overload_time / 1000 as queued_overload_time_s,\n    query_history.transaction_blocked_time / 1000 as transaction_blocked_time_s,\n    query_history.list_external_files_time / 1000 as list_external_files_time_s,\n    query_history.execution_time / 1000 as execution_time_s,\n    cost_per_query.currency\n\nfrom query_history\ninner join cost_per_query\n    on query_history.query_id = cost_per_query.query_id\norder by query_history.start_time", "relation_name": "apress.public.query_history_enriched"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:26.870781Z", "completed_at": "2024-08-09T14:27:26.875855Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:26.876576Z", "completed_at": "2024-08-09T14:27:26.876578Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011607170104980469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect query_id\nfrom apress.public.cost_per_query\nwhere query_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:26.873063Z", "completed_at": "2024-08-09T14:27:26.876038Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:26.876908Z", "completed_at": "2024-08-09T14:27:26.876911Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.011578798294067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    query_id as unique_field,\n    count(*) as n_records\n\nfrom apress.public.cost_per_query\nwhere query_id is not null\ngroup by query_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:26.878062Z", "completed_at": "2024-08-09T14:27:26.881517Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:26.881695Z", "completed_at": "2024-08-09T14:27:26.881698Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0041768550872802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.dbt_queries", "compiled": true, "compiled_code": "\n\nselect\n    dbt_metadata['dbt_snowflake_query_tags_version']::string as dbt_snowflake_query_tags_version, -- this will be null where the metadata came from a query comment in dbt-snowflake-monitoring versions <2.0.0\n    dbt_metadata['invocation_id']::string as dbt_invocation_id,\n    dbt_metadata['node_id']::string as dbt_node_id,\n    dbt_metadata['node_resource_type']::string as dbt_node_resource_type,\n    coalesce(dbt_metadata['node_name']::string, replace(array_slice(split(dbt_node_id, '.'), -1, array_size(split(dbt_node_id, '.')))[0], '\"')) as dbt_node_name, -- we can just use node_name once enough time has been that users have migrated to v2.0.0\n    dbt_metadata['materialized']::string as dbt_node_materialized,\n    dbt_metadata['is_incremental']::boolean as dbt_node_is_incremental,\n    dbt_metadata['node_alias']::string as dbt_node_alias,\n    dbt_metadata['node_meta']::variant as dbt_node_meta,\n    dbt_metadata['node_tags']::array as node_tags,\n    iff(dbt_snowflake_query_tags_version >= '1.1.3', dbt_metadata['node_refs']::array, []) as dbt_node_refs, -- correct refs available from 1.1.3 onwards\n    dbt_metadata['node_database']::string as dbt_node_database,\n    dbt_metadata['node_schema']::string as dbt_node_schema,\n    dbt_metadata['dbt_version']::string as dbt_version,\n    dbt_metadata['project_name']::string as dbt_project_name,\n    dbt_metadata['target_name']::string as dbt_target_name,\n    dbt_metadata['target_database']::string as dbt_target_database,\n    dbt_metadata['target_schema']::string as dbt_target_schema,\n    dbt_metadata['node_package_name']::string as dbt_node_package_name,\n    dbt_metadata['node_original_file_path']::string as dbt_node_original_file_path,\n    dbt_metadata['dbt_cloud_project_id']::string as dbt_cloud_project_id,\n    dbt_metadata['dbt_cloud_job_id']::string as dbt_cloud_job_id,\n    dbt_metadata['dbt_cloud_run_id']::string as dbt_cloud_run_id,\n    dbt_metadata['dbt_cloud_run_reason_category']::string as dbt_cloud_run_reason_category,\n    dbt_metadata['dbt_cloud_run_reason']::string as dbt_cloud_run_reason,\n    case\n        when dbt_cloud_project_id is not null\n        then\n            'Required dbt_cloud_account_id variable not set' -- noqa\n    end as dbt_cloud_job_url,\n    case\n        when dbt_cloud_project_id is not null\n        then\n            'Required dbt_cloud_account_id variable not set' -- noqa\n    end as dbt_cloud_run_url,\n    * exclude dbt_metadata\nfrom apress.public.query_history_enriched\nwhere dbt_metadata is not null\n    \n        -- Conservatively re-process the last 3 days to account for late arriving rates data which changes the cost per query. \n        -- Allow an override from project variable\n        and end_time > (select dateadd(day, -3, max(end_time)) from apress.public.dbt_queries)\n    ", "relation_name": "apress.public.dbt_queries"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:26.849936Z", "completed_at": "2024-08-09T14:27:28.456343Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:28.456703Z", "completed_at": "2024-08-09T14:27:28.456709Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 1.718858003616333, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.hourly_spend", "compiled": true, "compiled_code": "-- depends_on: apress.public.stg_metering_history\n\n\nwith hour_spine as (\n    \n\n        \n            \n            \n            \n            \n        \n    \n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 6270\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        hour,\n        row_number() over (order by 1) - 1,\n        '2023-11-14 19:00:00+00:00'\n        )\n\n\n    ) as date_hour\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_hour <= '2024-08-02 01:00:00+00:00'\n\n)\n\nselect * from filtered\n\n\n),\n\nhours as (\n    select\n        date_hour as hour,\n        hour::date as date,\n        count(hour) over (partition by date) as hours_thus_far,\n        day(last_day(date)) as days_in_month\n    from hour_spine\n),\n\nstorage_terabytes_daily as (\n    select\n        date,\n        'Table and Time Travel' as storage_type,\n        database_name,\n        sum(average_database_bytes) / power(1024, 4) as storage_terabytes\n    from apress.public.stg_database_storage_usage_history\n    group by 1, 2, 3\n    union all\n    select\n        date,\n        'Failsafe' as storage_type,\n        database_name,\n        sum(average_failsafe_bytes) / power(1024, 4) as storage_terabytes\n    from apress.public.stg_database_storage_usage_history\n    group by 1, 2, 3\n    union all\n    select\n        date,\n        'Stage' as storage_type,\n        null as database_name,\n        sum(average_stage_bytes) / power(1024, 4) as storage_terabytes\n    from apress.public.stg_stage_storage_usage_history\n    group by 1, 2, 3\n),\n\nstorage_spend_hourly as (\n    select\n        hours.hour,\n        'Storage' as service,\n        storage_terabytes_daily.storage_type,\n        null as warehouse_name,\n        storage_terabytes_daily.database_name,\n        coalesce(\n            sum(\n                div0(\n                    storage_terabytes_daily.storage_terabytes,\n                    hours.days_in_month * 24\n                ) * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join storage_terabytes_daily on hours.date = convert_timezone('UTC', storage_terabytes_daily.date)\n    left join apress.public.daily_rates as daily_rates\n        on storage_terabytes_daily.date = daily_rates.date\n            and daily_rates.service_type = 'STORAGE'\n            and daily_rates.usage_type = 'storage'\n    group by 1, 2, 3, 4, 5\n),\n\ndata_transfer_spend_hourly as (\n    -- Right now we don't have a way of getting this at an hourly grain\n    -- We can get source cloud + region, target cloud + region, and bytes transferred at an hourly grain from DATA_TRANSFER_HISTORY\n    -- But Snowflake doesn't provide data transfer rates programmatically, so we can't get the cost\n    -- We could make a LUT from https://www.snowflake.com/legal-files/CreditConsumptionTable.pdf but it would be a lot of work to maintain and would frequently become out of date\n    -- So for now we just use the daily reported usage and evenly distribute it across the day\n    select\n        hours.hour,\n        'Data Transfer' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(stg_usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        stg_usage_in_currency_daily.currency as currency\n    from hours\n    left join apress.public.stg_usage_in_currency_daily as stg_usage_in_currency_daily on\n        stg_usage_in_currency_daily.account_locator = current_account()\n        and stg_usage_in_currency_daily.usage_type = 'data transfer'\n        and hours.hour::date = stg_usage_in_currency_daily.usage_date\n),\n\ncompute_spend_hourly as (\n    select\n        hours.hour,\n        'Compute' as service,\n        null as storage_type,\n        stg_metering_history.name as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used_compute * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join apress.public.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n    left join apress.public.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'compute'\n    where\n        stg_metering_history.service_type = 'WAREHOUSE_METERING' and stg_metering_history.name != 'CLOUD_SERVICES_ONLY'\n    group by 1, 2, 3, 4\n),\n\nserverless_task_spend_hourly as (\n    select\n        hours.hour,\n        'Serverless Tasks' as service,\n        null as storage_type,\n        null as warehouse_name,\n        stg_serverless_task_history.database_name,\n        coalesce(\n            sum(\n                stg_serverless_task_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join apress.public.stg_serverless_task_history as stg_serverless_task_history on\n        hours.hour = date_trunc('hour', stg_serverless_task_history.start_time)\n    left join apress.public.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'serverless tasks'\n    group by 1, 2, 3, 4, 5\n),\n\nadj_for_incl_cloud_services_hourly as (\n    select\n        hours.hour,\n        'Adj For Incl Cloud Services' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_daily_history.credits_adjustment_cloud_services * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        0 as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join apress.public.stg_metering_daily_history as stg_metering_daily_history on\n        hours.hour = stg_metering_daily_history.date\n    left join apress.public.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'cloud services'\n    group by 1, 2, 3, 4\n),\n\n_cloud_services_usage_hourly as (\n    select\n        hours.hour,\n        hours.date,\n        'Cloud Services' as service,\n        null as storage_type,\n        case\n            when\n                stg_metering_history.name = 'CLOUD_SERVICES_ONLY' then 'Cloud Services Only'\n            else stg_metering_history.name\n        end as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(stg_metering_history.credits_used_cloud_services), 0\n        ) as credits_used_cloud_services\n    from hours\n    left join apress.public.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'WAREHOUSE_METERING'\n    group by 1, 2, 3, 4, 5\n),\n\n_cloud_services_billed_daily as (\n    select\n        date,\n        sum(credits_used_cloud_services) as credits_used_cloud_services,\n        sum(\n            credits_used_cloud_services + credits_adjustment_cloud_services\n        ) as credits_used_cloud_services_billable\n    from apress.public.stg_metering_daily_history\n    where\n        service_type = 'WAREHOUSE_METERING'\n    group by 1\n),\n\ncloud_services_spend_hourly as (\n    select\n        _cloud_services_usage_hourly.hour,\n        _cloud_services_usage_hourly.service,\n        _cloud_services_usage_hourly.storage_type,\n        _cloud_services_usage_hourly.warehouse_name,\n        _cloud_services_usage_hourly.database_name,\n        _cloud_services_usage_hourly.credits_used_cloud_services * daily_rates.effective_rate as spend,\n\n        (\n            div0(\n                _cloud_services_usage_hourly.credits_used_cloud_services,\n                _cloud_services_billed_daily.credits_used_cloud_services\n            ) * _cloud_services_billed_daily.credits_used_cloud_services_billable\n        ) * daily_rates.effective_rate as spend_net_cloud_services,\n        daily_rates.currency\n    from _cloud_services_usage_hourly\n    inner join _cloud_services_billed_daily on\n        _cloud_services_usage_hourly.date = _cloud_services_billed_daily.date\n    left join apress.public.daily_rates as daily_rates\n        on _cloud_services_usage_hourly.date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'cloud services'\n\n),\n\nautomatic_clustering_spend_hourly as (\n    select\n        hours.hour,\n        'Automatic Clustering' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join apress.public.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'AUTO_CLUSTERING'\n    left join apress.public.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'automatic clustering'\n    group by 1, 2, 3, 4\n),\n\nmaterialized_view_spend_hourly as (\n    select\n        hours.hour,\n        'Materialized Views' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join apress.public.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'MATERIALIZED_VIEW'\n    left join apress.public.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'materialized views'\n    group by 1, 2, 3, 4\n),\n\nsnowpipe_spend_hourly as (\n    select\n        hours.hour,\n        'Snowpipe' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join apress.public.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'PIPE'\n    left join apress.public.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'snowpipe'\n    group by 1, 2, 3, 4\n),\n\nsnowpipe_streaming_spend_hourly as (\n    select\n        hours.hour,\n        'Snowpipe Streaming' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join apress.public.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'SNOWPIPE_STREAMING'\n    left join apress.public.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'snowpipe streaming'\n    group by 1, 2, 3, 4\n),\n\nquery_acceleration_spend_hourly as (\n    select\n        hours.hour,\n        'Query Acceleration' as service,\n        null as storage_type,\n        stg_metering_history.name as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join apress.public.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'QUERY_ACCELERATION'\n    left join apress.public.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'query acceleration'\n    group by 1, 2, 3, 4\n),\n\nreplication_spend_hourly as (\n    select\n        hours.hour,\n        'Replication' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join apress.public.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'REPLICATION'\n    left join apress.public.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'replication'\n    group by 1, 2, 3, 4\n),\n\nsearch_optimization_spend_hourly as (\n    select\n        hours.hour,\n        'Search Optimization' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join apress.public.stg_metering_history as stg_metering_history on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'SEARCH_OPTIMIZATION'\n    left join apress.public.daily_rates as daily_rates\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'search optimization'\n    group by 1, 2, 3, 4\n),\n\nunioned as (\n    select * from storage_spend_hourly\n    union all\n    select * from data_transfer_spend_hourly\n    union all\n    select * from compute_spend_hourly\n    union all\n    select * from adj_for_incl_cloud_services_hourly\n    union all\n    select * from cloud_services_spend_hourly\n    union all\n    select * from automatic_clustering_spend_hourly\n    union all\n    select * from materialized_view_spend_hourly\n    union all\n    select * from snowpipe_spend_hourly\n    union all\n    select * from snowpipe_streaming_spend_hourly\n    union all\n    select * from query_acceleration_spend_hourly\n    union all\n    select * from replication_spend_hourly\n    union all\n    select * from search_optimization_spend_hourly\n    union all\n    select * from serverless_task_spend_hourly\n)\n\nselect\n    convert_timezone('UTC', hour)::timestamp_ltz as hour,\n    service,\n    storage_type,\n    warehouse_name,\n    database_name,\n    spend,\n    spend_net_cloud_services,\n    currency\nfrom unioned", "relation_name": "apress.public.hourly_spend"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-09T14:27:28.562555Z", "completed_at": "2024-08-09T14:27:28.566483Z"}, {"name": "execute", "started_at": "2024-08-09T14:27:28.566753Z", "completed_at": "2024-08-09T14:27:28.566758Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.005064964294433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_snowflake_monitoring.daily_spend", "compiled": true, "compiled_code": "select\n    convert_timezone('UTC', hour)::date as date, -- get UTC date to align with Snowflake billing\n    service,\n    storage_type,\n    warehouse_name,\n    database_name,\n    sum(spend) as spend,\n    sum(spend_net_cloud_services) as spend_net_cloud_services,\n    any_value(currency) as currency\nfrom apress.public.hourly_spend\ngroup by 1, 2, 3, 4, 5", "relation_name": "apress.public.daily_spend"}], "elapsed_time": 6.826147079467773, "args": {"enable_legacy_logger": false, "select": [], "use_colors": true, "empty": false, "log_format_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "inject_ephemeral_ctes": true, "defer": false, "print": true, "partial_parse_file_diff": true, "output": "text", "cache_selected_only": false, "log_file_max_bytes": 10485760, "log_level_file": "debug", "printer_width": 80, "source_freshness_run_project_hooks": false, "partial_parse": true, "log_format": "default", "require_resource_names_without_spaces": false, "macro_debugging": false, "introspect": true, "static_parser": true, "which": "compile", "favor_state": false, "show_resource_report": false, "strict_mode": false, "vars": {}, "exclude": [], "send_anonymous_usage_stats": true, "project_dir": "/Users/papi/Desktop/work/Promise/finances_dbt", "invocation_command": "dbt compile --profiles-dir ci_profile", "use_colors_file": true, "profiles_dir": "ci_profile", "log_path": "/Users/papi/Desktop/work/Promise/finances_dbt/logs", "quiet": false, "log_level": "info", "populate_cache": true, "require_explicit_package_overrides_for_builtin_materializations": true, "version_check": true, "write_json": true, "indirect_selection": "eager"}}